#!/usr/bin/env ruby
#
# screenly
# Ryan Carver / @rcarver
#
#/ screenly uploads screenshots to CloudApp. And more.
#/
#/  * Transports images directly from your clipboard to CloudApp.
#/  * Optionally wraps the cl.ly url in a markdown image tag.
#/  * Take screenshots for you. Run screenly, take the shot, paste the link.
#/
#/ Dependencies:
#/
#/  * `cloudapp` https://github.com/holman/dotfiles/blob/master/bin/cloudapp
#/  * `pngpaste` https://github.com/jcsalterego/pngpaste
#/
#/ Examples:
#/
#/    Take a screenshot and upload it (the default with no other arguments).
#/
#/      $ screenly
#/      <screenshotting in interactive mode. spacebar toggles betwen selection and window modes.>
#/      <in your clipboard: ![](http://cl.ly/...)>
#/
#/    Upload an image in your clipboard and get a markdown image tag.
#/
#/      <take a screenshot and store it on the clipboard (hold the ctrl key)>
#/      $ screenly -p -m awesome
#/      <in your clipboard: ![awesome](http://cl.ly/... "awesome")>
#/
#/    Upload multiple files on disk and get markdown for each one.
#/
#/      $ screenly -m one -m two file1.png file2.png
#/      <in your clipboard: ![one](http://cl.ly/... "one"),![two](http://cl.ly/... "two")>
#/
#/    Mix-and-match clipboard and files.
#/
#/      <take a screenshot and store it on the clipboard (hold the ctrl key)>
#/      $ screenly -p file1.png
#/      <in your clipboard: ![](http://cl.ly/...),![](http://cl.ly/...)>
#/
#/    Mix and match clipboard and files, with markdown.
#/
#/      <take a screenshot and store it on the clipboard (hold the ctrl key)>
#/      $ screenly -p -m clipped file1.png
#/      <in your clipboard: ![clipped](http://cl.ly/... "clipped"),![](http://cl.ly/...)>
#/
#/    Use '--' to separate args and files (useful to use markdown with no text with a file)
#/
#/      $ screenly -m -- file1.png
#/      <in your clipboard: ![](http://cl.ly/...)>

require 'fileutils'
require 'optparse'

# Default options.
@paste = false
@capture = nil
@markdown = [nil]
@test = !!ENV['TEST'] # Test mode. Don't upload to CloudApp.

# If no arguments are given, capture a screenshot and copy it to the clipboard
# as markdown.
if ARGV.empty?
  @capture = "i"
  @markdown = [nil]
end

# rad: https://github.com/rtomayko/ronn/blob/master/bin/ronn
def about
  puts File.readlines(__FILE__).
    grep(/^#\/.*/).
    map { |line| line.chomp[3..-1] }.
    join("\n")
end

OptionParser.new(ARGV) { |opts|
  opts.on("-c", "--capture [MODE]", "Capture a screenshot now. Defaults to interactive mode.") do |mode|
    abort "capture mode must be one of <i, w, s>. See `screencapture -h`" if mode && !%w(i w s).include?(mode)
    @capture = mode || "i"
  end
  opts.on("-p", "--paste", "Upload a png from your clipboard.") do |p|
    @paste = true
  end
  opts.on("-m", "--markdown [TEXT]", "Create a markdown link. May be used once for each image.") do |m|
    @markdown << m
  end
  opts.on("-h", "--help", "Show the help") do
    about
    puts
    puts "Usage: screenly <options> [<file>...]"
    puts "       screenly"
    puts "       screenly -c"
    puts "       screenly -p"
    puts "       screenly -c -m 'describe image'"
    puts "       screenly -m 'describe image' file.png another.png"
    puts opts.to_s
    exit 2
  end
}.parse!

# Track tempfiles.
@tempfiles = []

# Clean up the tempfiles.
at_exit do
  @tempfiles.each { |file| FileUtils.rm(file) if File.exist?(file) }
end

# Create a temporary file. We can't use Tempfile because CloudApp needs
# a .png extension.
def tf(name)
  path = "/tmp/#{name}"
  @tempfiles << path
  path
end

if @paste

  # Create a temporary file name for writing a png on the clipboard.
  # If we've specified any markdown strings, use that as the file name.
  if @markdown.any?
    tempfile = tf "#{@markdown.first.downcase.gsub(/\s+/, '-')}.png"
  else
    tempfile = tf "screenly-paste.png"
  end

  # pngpaste writes to stderr on error but still returns
  # an exitstatus of 0. To detect an error redirect stderr
  # to stdout and assume that success prints nothing.
  out = `pngpaste #{tempfile} 2>&1`
  abort out unless out.empty?

  # Store the tempfile in ARGV to pass to cloudapp.
  ARGV.unshift tempfile
end

if @capture

  tempfile = tf "screenly-capture.png"

  # Run screencapture.
  `screencapture -#{@capture} -m -tpng #{tempfile}`

  # screencapture returns 0 if it's aborted, so see if the
  # file was written or not to determine success.
  abort "Failed to capture the screen." unless File.exist?(tempfile)

  # Store the tempfile in ARGV to pass to cloudapp.
  ARGV.unshift tempfile
end

if @test
  puts "Uploading files:"
  puts ARGV.join("\n")
  urls = []
  ARGV.size.times { |i| urls << "http://cl.ly/img#{i}" }
  `echo '#{urls.join(',')}' | pbcopy`
else
  # Let cloudapp do the uploads.
  system "cloudapp", *ARGV
end

# Transform the urls from cloudapp to markdown links.
unless @markdown.empty?
  urls = `pbpaste`
  links = urls.split(",").zip(@markdown).map do |url, m|
    if m.nil?
      "![](#{url})"
    else
      "![#{m}](#{url} \"#{m}\")"
    end
  end
  `echo '#{links.join(',')}' | tr -d "\n" | pbcopy`
end

if @test
  puts
  puts "Your clipboard contains:"
  puts `pbpaste`.split(",")
end
